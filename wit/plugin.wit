package plugins:main

interface imports {
  use types.{embedding}

  load-model: func(ty: model-type) -> model-id
  unload-model: func(id: model-id)
  infer: func(id: model-id, input: string, max-tokens: option<u32>, stop-on: option<string>) -> string
  
  record model-id {
    id: u32,
  }

  get-embedding: func(id: model-id, document: string) -> embedding

  create-embedding-db: func(embeddings: list<embedding>, documents: list<string>) -> embedding-db-id
  remove-embedding-db: func(id: embedding-db-id)
  find-closest-documents: func(id: embedding-db-id, search: embedding, count: u32) -> list<string>
  find-documents-within: func(id: embedding-db-id, search: embedding, within: float32) -> list<string>

  record embedding-db-id {
    id: u32,
  }

  print: func(str: string)

  variant model-type { MPT(mpt-type), gpt-neo-x(gpt-neo-x-type), llama(llama-type) }
  enum llama-type { vicuna, guanaco, wizardlm }
  enum mpt-type { base, story, instruct, chat }
  enum gpt-neo-x-type { large-pythia, tiny-pythia, dolly-seven-b, stablelm }
}

interface types {
  record embedding {
    vector: list<float32>
  }
}

interface definitions {
  use types.{embedding}

  record definition {
    name: string,
    description: string,
    inputs: list<io-definition>,
    outputs: list<io-definition>,
  }

  record io-definition {
    name: string,
    ty: value-type,
  }

  variant value {
    single(primitive-value),
    many(list<primitive-value>),
  }

  variant primitive-value {
    text(string),
    embedding(embedding),
  }

  variant value-type {
    single(primitive-value-type),
    many(list<primitive-value-type>),
  }

  enum primitive-value-type {
    text,
    embedding,
  }

  structure: func() -> definition

  run: func(inputs: list<value>) -> list<value>
}

world plugin-world {
  import imports
  export definitions
}