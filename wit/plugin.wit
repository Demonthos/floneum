package plugins:main

interface imports {
  use types.{embedding, structure, structure-id, model-id, model-type, embedding-db-id, node-id, tab-id}

  load-model: func(ty: model-type) -> model-id
  unload-model: func(id: model-id)
  infer: func(id: model-id, input: string, max-tokens: option<u32>, stop-on: option<string>) -> string
  infer-structured: func(id: model-id, input: string, max-tokens: option<u32>, structure: structure-id) -> string

  get-embedding: func(id: model-id, document: string) -> embedding

  create-embedding-db: func(embeddings: list<embedding>, documents: list<string>) -> embedding-db-id
  add-embedding: func(id: embedding-db-id, embedding: embedding, documents: string)
  remove-embedding-db: func(id: embedding-db-id)
  find-closest-documents: func(id: embedding-db-id, search: embedding, count: u32) -> list<string>
  find-documents-within: func(id: embedding-db-id, search: embedding, within: float32) -> list<string>

  create-structure: func(structure: structure) -> structure-id
  remove-structure: func(id: structure-id)

  new-tab: func(headless: bool) -> tab-id

  browse-to: func(tab: tab-id, url: string)

  find-in-current-page: func(tab: tab-id, selector: string) -> node-id

  get-element-text: func(tab: tab-id, id: node-id) -> string

  click-element: func(tab: tab-id, id: node-id)

  type-into-element: func(tab: tab-id, id: node-id, keys: string)

  get-element-outer-html: func(tab: tab-id, id: node-id) -> string

  screenshot-browser: func(tab: tab-id, ) -> list<u8>

  screenshot-element: func(tab: tab-id, element: node-id) -> list<u8>

  find-child-of-element: func(tab: tab-id, id: node-id, selector: string) -> node-id

  get-request: func(url: string, headers: list<header>) -> string

  record header {
    key: string,
    value: string,
  }
}

interface types {
  record embedding {
    vector: list<float32>
  }

  variant structure {
    num(number-parameters),
    str(unsigned-range),
    literal(string),
    or(either-structure),
    then(then-structure),
    sequence(sequence-parameters),
  }

  record then-structure {
    first: structure-id,
    second: structure-id,
  }

  record either-structure {
    first: structure-id,
    second: structure-id,
  }

  record sequence-parameters {
    item: structure-id,
    separator: structure-id,
    min-len: u64,
    max-len: u64,
  }

  record number-parameters {
    min: float64,
    max: float64,
    integer: bool
  }

  record unsigned-range {
    min: u64,
    max: u64,
  }

  record structure-id {
    id: u32
  }

  record embedding-db-id {
    id: u32,
  }

  record model-id {
    id: u32,
  }

  record node-id {
    id: u32,
  }

  record tab-id {
    id: u32,
  }

  variant model-type { MPT(mpt-type), gpt-neo-x(gpt-neo-x-type), llama(llama-type) }
  enum llama-type { vicuna, guanaco, wizardlm, orca }
  enum mpt-type { base, story, instruct, chat }
  enum gpt-neo-x-type { large-pythia, tiny-pythia, dolly-seven-b, stablelm }
}

interface definitions {
  use types.{embedding, model-id, embedding-db-id, model-type}

  record definition {
    name: string,
    description: string,
    inputs: list<io-definition>,
    outputs: list<io-definition>,
  }

  record io-definition {
    name: string,
    ty: value-type,
  }

  variant input {
    single(primitive-value),
    many(list<primitive-value>),
  }

  variant output {
    single(primitive-value),
    many(list<primitive-value>),
    halt,
  }

  variant primitive-value {
    model(model-id),
    model-type(model-type),
    database(embedding-db-id),
    number(s64),
    text(string),
    embedding(embedding),
    boolean(bool)
  }

  variant value-type {
    single(primitive-value-type),
    many(primitive-value-type),
  }

  enum primitive-value-type {
    number,
    text,
    embedding,
    database,
    model,
    model-type,
    boolean,
    any
  }

  structure: func() -> definition

  run: func(inputs: list<input>) -> list<output>
}

world plugin-world {
  import imports
  export definitions
}
